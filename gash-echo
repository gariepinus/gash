#!/bin/bash
#
# Write formatted message to output.

#######################################
# Get numerical value for log level.
# Arguments:
#   log level
# Outputs:
#   Writes numerical value to stoud
#   DEBUG => 0
#   INFO  => 1
#   WARN  => 2
#   ERROR => 3
#   -1 for anyting else (unkown level)
# Returns:
#   0 if log level is valid
#   1 if not
#######################################
function level_to_num() {
	case $1 in
		DEBUG)
			echo "0"
			return 0
			;;
		INFO)
			echo "1"
			return 0
			;;
		WARN)
			echo "2"
			return 0
			;;
		ERROR)
			echo "3"
			return 0
			;;
		*)
			echo "-1"
			return 1
			;;
	esac
}

#######################################
# Write usage info to stderr and exit
# with 1.
# Outputs:
#  Usage info and help hint
#######################################
function info_and_exit() {
	echo -e "Usage: $USAGE" 1>&2
	echo -e "       $HINT" 1>&2
	exit 1
}

##
## Constants
##
readonly NAME="$(basename $0)"
readonly VERSION="1.0"
readonly USAGE="$NAME [options] MESSAGE_LOGLEVEL MESSAGE_TEXT"
readonly HINT="-h for help"
readonly DESCRIPTION="Write formatted message to output."

readonly ARGUMENTS=$( cat << arguments
\tMESSAGE_LOGLEVEL ...... DEBUG|INFO|WARN|ERROR
\t                        Message will only be written to output
\t                        if enviroment variable GASHOPT_LOGLEVEL
\t                        contains equal or lower level. 
\tMESSAGE_TEXT .......... Content you want to write to output.
arguments
)

readonly OPTIONS=$( cat << options
\t-s (simple) ........... Only write MESSAGE_TEXT to output. No
\t                        log level information, timestamp or
\t                        color (overwrites ´-c´ and ´-t´).
\t-o (options) OPTIONS... Options for echo (default: ´-e´).
\t-c (color) ............ Include control sequences for color
\t                        in output.
\t-t (timestamp) ........ Include timestamp in output.
\t-V (version) .......... Print version and exit.
\t-h (help) ............. Print help and exit.
options
)

readonly ENVIROMENT_VARIABLES=$( cat << enviroment_variables
\tGASHOPT_LOGLEVEL ...... DEBUG|INFO|WARN|ERROR (default: INFO)
\t                        Message will only be written to output if cli
\t                        argument MESSAGE_LEVEL is higher or equal.
\tGASHOPT_TIMESTAMP ..... true|false (default: false)
\t                        Include iso 8601 timestamp in output. Can be
\t                        overwritten by ´-t´ and ´-s´ option.
\tGASHOPT_COLOR ......... true|false (default: false)
\t                        Include control sequenced for color in output.
\t                        Can be overwritten by ´-c´ and ´-s´ option.
enviroment_variables
)

readonly HELP=$( cat << help
$NAME/v$VERSION

$DESCRIPTION

Usage:
\t$USAGE

Arguments:
$ARGUMENTS

Options:
$OPTIONS

Enviroment variables:
$ENVIROMENT_VARIABLES
help
)

##
## Enviroment variables & defaults
##
[[ -z "$GASHOPT_LOGLEVEL" ]] && GASHOPT_LOGLEVEL="INFO"
[[ -z "$GASHOPT_TIMESTAMP" ]] && GASHOPT_TIMESTAMP=false
[[ -z "$GASHOPT_COLOR" ]] && GASHOPT_COLOR=false

ECHO_OPTIONS="-e"
SIMPLE_OUTPUT=false

##
## Options
##
while getopts "so:ctVh" opt; do
	case "$opt" in
		s)
			readonly SIMPLE_OUTPUT=true
			;;
		o)
			readonly ECHO_OPTIONS="$OPTARG"
			;;
		c)
			readonly GASHOPT_COLOR=true
			;;
		t)
			readonly GASHOPT_TIMESTAMP=true
			;;
		V)
			echo -e "$VERSION"
			exit 0
			;;
		h)
			echo -e "$HELP"
			exit 0
			;;
		*)
			info_and_exit
			;;
	esac
done

# Remove options from $@
shift $((OPTIND-1))

##
## Arguments
##
if [[ $# -ne 2 ]]; then
	echo -e "$0: Wrong number of arguments." 1>&2
	info_and_exit
fi

readonly MESSAGE_LOGLEVEL="$1"
readonly MESSAGE_TEXT="$2"

##
## Log levels
##
readonly GASHOPT_LOGLEVEL_NUM="$(level_to_num $GASHOPT_LOGLEVEL)" 
readonly MESSAGE_LOGLEVEL_NUM="$(level_to_num $MESSAGE_LOGLEVEL)"

if [[ "$GASHOPT_LOGLEVEL_NUM" -eq -1 ]]; then
	echo "$0: Invalid loglevel ´$GASHOPT_LOGLEVEL´ set by eviroment variable GASHOPT_LOGLEVEL." 1>&2
	info_and_exit
fi

if [[ "$MESSAGE_LOGLEVEL_NUM" -eq -1 ]]; then
	echo "$0: Invalid loglevel ´$MESSAGE_LOGLEVEL´ set by cli argument MESSAGE_LOGLEVEL." 1>&2
	info_and_exit
fi

if [[ "$MESSAGE_LOGLEVEL_NUM" -lt "$GASHOPT_LOGLEVEL_NUM" ]]; then
	# Log level for message is less than gashopt log level. The message will not be
	# written and we can exit here (e.g. message is INFO and gashopt is set to WARN).
	exit 0
fi

##
## Simple
##
if $SIMPLE_OUTPUT; then
	# Simple output: Just write message text to output and exit here. No need for
	# timestamps, colors or any other fancy stuff.
	echo "$ECHO_OPTIONS" "$MESSAGE_TEXT"
	exit $?
fi

##
## Timestamp
##
if $GASHOPT_TIMESTAMP; then
	readonly TIMESTAMP="$(date --iso-8601=s) "
else
	readonly TIMESTAMP=""
fi

##
## Color
##
if $GASHOPT_COLOR; then
	case "$MESSAGE_LOGLEVEL" in
		DEBUG)
			readonly MESSAGE_COLOR="\e[2m" #Dim
			;;
		INFO)
			readonly MESSAGE_COLOR="\e[94m" #Light blue
			;;
		WARN)
			readonly MESSAGE_COLOR="\e[93m" #Light yellow
			;;
		ERROR)
			readonly MESSAGE_COLOR="\e[91m" #Light red
			;;
		*)
			readonly MESSAGE_COLOR=""
			;;
	esac
	readonly DEFAULT_COLOR="\e[39m\e[0m"
else
	readonly MESSAGE_COLOR=""
	readonly DEFAULT_COLOR=""
fi

##
## Indent
##
case "$MESSAGE_LOGLEVEL" in
	INFO|WARN)
		readonly INDENT="  "
		;;
	ERROR|DEBUG|*)
		readonly INDENT=" "
		;;
esac

##
## Write message to output
##
echo "$ECHO_OPTIONS" "$MESSAGE_COLOR$TIMESTAMP[$MESSAGE_LOGLEVEL]$INDENT$MESSAGE_TEXT$DEFAULT_COLOR"
exit $?
