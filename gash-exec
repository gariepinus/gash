#!/bin/bash
#
# Execute command supressing all of its output and
# use gash-echo to write status information to
# stderr.

#######################################
# Write usage info to stderr and exit
# with 1.
# Outputs:
#  Usage info and help hint
#######################################
function info_and_exit() {
	echo -e "Usage: $USAGE" 1>&2
	echo -e "       $HINT" 1>&2
	exit 1
}

##
## Constants
##
readonly NAME="$(basename $0)"
readonly VERSION="1.0"
readonly USAGE="$NAME [options] COMMAND MESSAGE"
readonly HINT="-h for help"

readonly DESCRIPTION=$( cat << description
Execute command supressing all of its output and
use gash-echo to write status information to
stderr.
description
)

readonly ARGUMENTS=$( cat << arguments
\tCOMMAND ............... Command to be executed.
\tMESSAGE ............... Description of what COMMAND is doing.
arguments
)

readonly OPTIONS=$( cat << options
\t-o (output) ........... Write command output to stdout.
\t-l (level) LEVEL ...... Message level used for gash-echo
\t                        (default: ´INFO´).
\t-v (verbose) .......... Write more information to stderr
\t                        (command that gets executed, stdout
\t                        and stderr of command).
\t-d (dry-run) .......... Do not actually execute command.
\t-c (color) ............ Write status information with color.
\t-t (timestamp) ........ Include timestamp in status information.
\t-V (version) .......... Print version and exit.
\t-h (help) ............. Print help and exit.
options
)

readonly ENVIROMENT_VARIABLES=$( cat << enviroment_variables
\tGASHOPT_TIMESTAMP ..... true|false (default: false)
\t                        Include iso 8601 timestamp in output. Can be
\t                        overwritten by ´-t´ option.
\tGASHOPT_COLOR ......... true|false (default: false)
\t                        Write status information with color. Can be
\t                        overwritten by ´-c´ option.
\tGASHOPT_DRYRUN ........ true|false (default: false)
\t                        Don't execute command. Can be overwritten by
\t                        ´-d´ option.
\tGASHOPT_VERBOSE ....... true|false (default: false)
\t                        Write more information to stderr (command
\t                        that gets executed, stdout and stderr of
\t                        command).
enviroment_variables
)

readonly HELP=$( cat << help
$NAME/v$VERSION

$DESCRIPTION

Usage:
\t$USAGE

Arguments:
$ARGUMENTS

Options:
$OPTIONS

Enviroment variables:
$ENVIROMENT_VARIABLES
help
)

##
## Enviroment variables & defaults
##
[[ -z "$GASHOPT_TIMESTAMP" ]] && GASHOPT_TIMESTAMP=false
[[ -z "$GASHOPT_COLOR" ]] && GASHOPT_COLOR=false
[[ -z "$GASHOPT_DRYRUN" ]] && GASHOPT_DRYRUN=false
[[ -z "$GASHOPT_VERBOSE" ]] && GASHOPT_VERBOSE=false

MESSAGE_LEVEL="INFO"
PRINT_OUTPUT=false

##
## Options
##
while getopts "ol:vdctVh" opt; do
	case "$opt" in
		o)
			readonly PRINT_OUTPUT=true
			;;
		l)
			readonly MESSAGE_LEVEL="$OPTARG"
			;;
		v)
			readonly GASHOPT_VERBOSE=true
			;;
		d)
			readonly GASHOPT_DRYRUN=true
			;;
		c)
			export GASHOPT_COLOR=true
			;;
		t)
			export GASHOPT_TIMESTAMP=true
			;;
		V)
			echo -e "$VERSION"
			exit 0
			;;
		h)
			echo -e "$HELP"
			exit 0
			;;
		*)
			info_and_exit
			;;
	esac
done

# Remove options from $@
shift $((OPTIND-1))

##
## Arguments
##
if [[ $# -ne 2 ]]; then
	echo -e "$0: Wrong number of arguments." 1>&2
	info_and_exit
fi

readonly COMMAND="$1"
readonly MESSAGE="$2"

##
## Color
##
if $GASHOPT_COLOR; then
	readonly RED="\e[1m\e[91m" # Bold + Light red
	readonly GREEN="\e[1m\e[92m" # Bold + Light green
	readonly YELLOW="\e[1m\e[93m" # Bold + Light yellow
	readonly CYAN="\e[96m" # Light cyan
	readonly MAGENTA="\e[95m" # Light magenta
	readonly RESET="\e[39m\e[0m"
else
	readonly RED=""
	readonly GREEN=""
	readonly YELLOW=""
	readonly CYAN=""
	readonly MAGENTA=""
	readonly RESET=""
fi

##
## Status information
##
gash-echo -o "-en" "$MESSAGE_LEVEL" "$MESSAGE... " 1>&2

if $GASHOPT_VERBOSE ; then
	# Write command you are about to execute to stderr
	gash-echo -s "$MESSAGE_LEVEL" "\n$CYAN>>> $MAGENTA$COMMAND$RESET" 1>&2
fi

##
## Execution
##
if $GASHOPT_DRYRUN; then
	RESULT=0
else
	if $GASHOPT_VERBOSE; then
		# Capture stdout, let stderr through
		OUTPUT="$($COMMAND)"
		RESULT=$?
	else
		# Capture stdout, discard stderr 
		OUTPUT="$($COMMAND 2>/dev/null)"
		RESULT=$?
	fi
fi

##
## Result
##
if $GASHOPT_VERBOSE; then
	# Write command output to stderr.
	gash-echo -s "$MESSAGE_LEVEL" "$OUTPUT" 1>&2
	gash-echo -s -o "-en" "$MESSAGE_LEVEL" "$CYAN<<<$RESET " 1>&2
fi

# Write information about execution result to stderr.
if $GASHOPT_DRYRUN; then
	gash-echo -s "$MESSAGE_LEVEL" "$YELLOW(Dry run)$RESET" 1>&2
elif [[ $RESULT -eq 0 ]]; then
	gash-echo -s "$MESSAGE_LEVEL" "$GREEN(Ok)$RESET" 1>&2
else
	gash-echo -s "$MESSAGE_LEVEL" "$RED(Failed)$RESET" 1>&2
fi

##
## Done
##
if $PRINT_OUTPUT; then
	# Write command output to stdout.
	echo -e $OUTPUT
fi

# Exit with return value of command.
exit $RESULT
